// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("NEXT_PUBLIC_DATABASE_URL")
}

model User {
  id            String   @id @default(cuid()) @map("_id")
  name          String
  email         String   @unique
  emailVerified Boolean  @default(false)
  image         String?
  premium       Boolean  @default(false)
  role          String   @default("user")
  banned        Boolean  @default(false)
  banReason     String?
  banExpires    Int? // Unix timestamp for ban expiration
  balance       Float    @default(25000.0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  sessions     Session[]
  accounts     Account[]
  transactions Transaction[]
  // Friend relations using explicit join model
  following    Friendship[]  @relation(name: "FollowerRelation")
  followers    Friendship[]  @relation(name: "FollowingRelation")

  ownedLootBoxes UserLootBox[] // Many-to-many relationship with lootboxes

  @@map("user")
}

model LootBoxStock {
  id        String  @id @default(cuid()) @map("_id")
  lootBox   LootBox @relation(fields: [lootBoxId], references: [id])
  lootBoxId String
  symbol    String // Stock symbol (e.g., "AAPL", "GOOGL")
  quantity  Int // Number of stocks in the loot box

  // Prevent duplicate stocks in the same loot box
  @@unique([lootBoxId, symbol])
  @@map("lootbox_stock")
}

model UserLootBox {
  id          String             @id @default(cuid()) @map("_id")
  user        User               @relation(fields: [userId], references: [id])
  userId      String
  lootBox     LootBox            @relation(fields: [lootBoxId], references: [id])
  lootBoxId   String
  purchasedAt DateTime           @default(now())
  stocks      UserLootBoxStock[] // Many-to-many relationship with stocks

  // Prevents duplicate purchases of the same loot box
  @@unique([userId, lootBoxId])
  @@map("user_lootbox")
}

model LootBox {
  id        String         @id @default(cuid()) @map("_id")
  name      String
  price     Int
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  stocks    LootBoxStock[] // Many-to-many relationship with stocks
  owners    UserLootBox[] // Many-to-many relationship with users

  @@map("lootbox")
}

model UserLootBoxStock {
  id            String      @id @default(cuid()) @map("_id")
  userLootBox   UserLootBox @relation(fields: [userLootBoxId], references: [id])
  userLootBoxId String
  symbol        String
  quantity      Int // Number of stocks the user receives from this loot box

  // Ensures one entry per stock per loot box
  @@unique([userLootBoxId, symbol])
  @@map("user_lootbox_stock")
}

model Stock {
  id       String @id @default(cuid()) @map("_id")
  userId   String
  symbol   String
  quantity Int
  avgPrice Float

  @@unique([userId, symbol])
}

model Friendship {
  id          String @id @default(cuid()) @map("_id")
  requesterId String
  recipientId String
  status      String @default("pending")

  // Relations
  requester User @relation(name: "FollowerRelation", fields: [requesterId], references: [id])
  recipient User @relation(name: "FollowingRelation", fields: [recipientId], references: [id])

  // Prevents duplicate follow relationships
  @@unique([requesterId, recipientId])
}

model Transaction {
  id          String   @id @default(cuid()) @map("_id")
  userId      String
  stockSymbol String
  type        String // "BUY" or "SELL"
  quantity    Int
  price       Float
  totalCost   Float
  timestamp   DateTime @default(now())
  status      String   @default("COMPLETED")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([stockSymbol])
  @@index([timestamp])
}

model Session {
  id             String   @id @default(cuid()) @map("_id")
  userId         String
  token          String   @unique
  expiresAt      DateTime
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid()) @map("_id")
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  idToken String?

  @@unique([providerId, accountId])
  @@index([userId])
  @@map("account")
}

model Verification {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@index([identifier])
  @@map("verification")
}
