// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("NEXT_PUBLIC_DATABASE_URL")
}

model User {

  id             String        @id @default(cuid()) @map("_id")
  name           String
  email          String        @unique
  emailVerified  Boolean       @default(false)
  image          String?
  badgeImage     String?
  premium        Boolean       @default(false)
  role           String        @default("user")
  banned         Boolean       @default(false)
  banReason      String?
  banExpires     Int?
  balance        Float         @default(100000.0)
  bio            String?       @default("No bio yet.") 

  chatMessages   ChatMessage[]
  votes          UserVote[]
  favoriteStocks String[]      @default([])

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  sessions       Session[]
  accounts       Account[]
  transactions   Transaction[]
  following      Friendship[]  @relation(name: "FollowerRelation")
  followers      Friendship[]  @relation(name: "FollowingRelation")

  userStocks     UserStock[]
  userLootBoxes  UserLootBox[]
  achievements   UserAchievement[]

  posts          Post[]        @relation("UserPosts") 
  reposts        UserPostRepost[] 

  likes          UserLike[]    
  NewsComment NewsComment[]
  
  @@map("user")
}



model LootBox {
  id            String         @id @default(cuid()) @map("_id")
  name          String
  price         Float
  userLootBoxes UserLootBox[]
  lootBoxStocks LootBoxStock[]

  @@map("lootbox")
}

model UserStock {
  id       String @id @default(cuid()) @map("_id")
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  stock    Stock  @relation(fields: [stockId], references: [id])
  stockId  String
  quantity Int

  @@unique([userId, stockId]) // Ensures each user can only have one entry per stock
}

model UserLootBox {
  id        String  @id @default(cuid()) @map("_id")
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  lootBox   LootBox @relation(fields: [lootBoxId], references: [id])
  lootBoxId String
  quantity  Int

  @@unique([userId, lootBoxId])
  @@map("userlootbox")
}

model Stock {
  id            String         @id @default(cuid()) @map("_id")
  name          String         @unique
  price         Float          @default(0)
  userStocks    UserStock[]
  lootBoxStocks LootBoxStock[]

  @@map("stock")
}

model LootBoxStock {
  id        String  @id @default(cuid()) @map("_id")
  lootBox   LootBox @relation(fields: [lootBoxId], references: [id])
  lootBoxId String
  stock     Stock   @relation(fields: [stockId], references: [id])
  stockId   String
  quantity  Int

  @@unique([lootBoxId, stockId])
  @@map("lootboxstock")
}

model Friendship {
  id          String   @id @default(cuid()) @map("_id")
  requesterId String
  recipientId String
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations for friend relationships
  requester User @relation(name: "FollowerRelation", fields: [requesterId], references: [id])
  recipient User @relation(name: "FollowingRelation", fields: [recipientId], references: [id])

  // Prevents duplicate follow relationships
  @@unique([requesterId, recipientId])
}

model Transaction {
  id          String   @id @default(cuid()) @map("_id")
  userId      String
  stockSymbol String
  type        String // "BUY" or "SELL"
  quantity    Int
  price       Float
  totalCost   Float
  timestamp   DateTime @default(now())
  status      String   @default("COMPLETED")
  publicNote  String? // Optional public note
  privateNote String? // Optional private note

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([stockSymbol])
  @@index([timestamp])
}

model Session {
  id             String   @id @default(cuid()) @map("_id")
  userId         String
  token          String   @unique
  expiresAt      DateTime
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid()) @map("_id")
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  idToken String?

  @@unique([providerId, accountId])
  @@index([userId])
  @@map("account")
}

model Verification {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@index([identifier])
  @@map("verification")
}

model AlphaVantageNews {
  id        String   @id @default(cuid()) @map("_id")
  tickers   String   @default("NVDA") // Comma-separated list of tickers
  data      Json // Store the full API response as JSON
  expiresAt DateTime // When the cache expires
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tickers])
  @@map("alphavantage_news")
}

model ChatMessage {
  id        String   @id @default(cuid()) @map("_id")
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  timestamp DateTime @default(now())

  @@index([userId])
  @@index([timestamp])
  @@map("chat_message")
}

model MarketSentiment {
  id            String   @id @default(cuid()) @map("_id")
  bullishCount  Int      @default(0)
  bearishCount  Int      @default(0)
  timestamp     DateTime @default(now())
  mostDiscussed Json 
  topPicks      Json 
  marketTrend   Json 
  date          String   @unique 

  @@index([timestamp])
  @@map("market_sentiment")
}

model UserVote {
  id          String   @id @default(cuid()) @map("_id")
  userId      String
  date        String 
  sentiment   String 
  topPick     String? 
  marketTrend String? 
  timestamp   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
  @@map("user_vote")
}

model Achievement {
  id          String            @id @default(cuid()) @map("_id")
  name        String
  description String
  image       String?
  users       UserAchievement[]

  @@map("achievement")
}

model UserAchievement {
  id            String   @id @default(cuid()) @map("_id")
  userId        String
  achievementId String
  earnedAt      DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievement")
}

model Post {
  id        String   @id @default(cuid()) @map("_id")
  content   String?  
  imageUrl  String?  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  user      User     @relation("UserPosts", fields: [userId], references: [id], onDelete: Cascade)

  likes     UserLike[]

  parentId  String?  
  parent    Post?    @relation("CommentThread", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children  Post[]   @relation("CommentThread")

  repostId  String?  
  repost    Post?    @relation("RepostRelation", fields: [repostId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reposts   Post[]   @relation("RepostRelation")

  repostedBy UserPostRepost[]  

  @@map("post")
}


model UserPostRepost {
  id      String   @id @default(cuid()) @map("_id") // Use a single primary key
  userId  String
  postId  String

  user    User     @relation(fields: [userId], references: [id])
  post    Post     @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, postId]) 
  @@map("user_post_repost")
}


model UserLike {
  id      String @id @default(cuid()) @map("_id")
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId  String
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model NewsComment {
  id        String   @id @default(cuid()) @map("_id")
  content   String
  newsUrl   String   // URL of the news article
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([newsUrl])
  @@map("news_comment")
}