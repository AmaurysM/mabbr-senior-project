// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(cuid()) @map("_id")
  name           String
  email          String        @unique
  emailVerified  Boolean       @default(false)
  image          String?
  banner         String?
  backgroundImage String?
  badgeImage     String?
  premium        Boolean       @default(false)
  role           String        @default("user")
  banned         Boolean       @default(false)
  banReason      String?
  banExpires     Int?
  balance        Float         @default(100000.0)
  bio            String?       @default("No bio yet.")
  tokenCount     Int           @default(0)

  votes          UserVote[]
  favoriteStocks String[]      @default([])

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  sessions       Session[]
  accounts       Account[]
  transactions   Transaction[]
  following      Friendship[]  @relation(name: "FollowerRelation")
  followers      Friendship[]  @relation(name: "FollowingRelation")

  userStocks     UserStock[]
  userLootBoxes  UserLootBox[]
  achievements   UserAchievement[]

  likes          UserLike[]
  comments       Comment[]
  commentLike    CommentLike[]
  commentDislike CommentDislike[]
  aiUsage        StockAIUsage[]
  dailyDrawEntries DailyDrawEntry[]

  dailyDrawNotifications DailyDrawNotification[]
  activityFeedEntries    ActivityFeedEntry[]

  @@map("user")
}

model Comment {
  id              String   @id @default(cuid()) @map("_id")
  content         String
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  commentableId   String?   // Can be postId, newsUrl, or chatId
  commentableType CommentableType
  commentDescription String?
  stockSymbol     String?   // For stock-specific chat messages

  parentId        String?  
  parent          Comment? @relation("CommentThread", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children        Comment[] @relation("CommentThread")

  commentLikes    CommentLike[]
  commentDislikes  CommentDislike[]

  image           String?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([commentableId, commentableType])
  @@index([stockSymbol])
}

enum CommentableType {
  TOPIC
  ROOM
  POST
  COMMENT
  NEWS
  GLOBALCHAT
  FEED
  STOCKCHAT
}


model CommentLike {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  commentId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@map("comment_like")
}

model CommentDislike {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  commentId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@map("comment_dislike")
}

model UserLike {
  id              String   @id @default(cuid()) @map("_id")
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  likeableId      String   // Can be postId or commentId
  likeableType    LikeableType

  createdAt       DateTime @default(now())

  @@unique([userId, likeableId, likeableType]) 
}

enum LikeableType {
  POST
  COMMENT
}

model LootBox {
  id            String         @id @default(cuid()) @map("_id")
  name          String
  price         Float
  description   String?
  userLootBoxes UserLootBox[]
  lootBoxStocks LootBoxStock[]

  @@map("lootbox")
}

model UserStock {
  id       String @id @default(cuid()) @map("_id")
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  stock    Stock  @relation(fields: [stockId], references: [id])
  stockId  String
  quantity Int

  @@unique([userId, stockId]) // Ensures each user can only have one entry per stock
}

model UserLootBox {
  id        String  @id @default(cuid()) @map("_id")
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  lootBox   LootBox @relation(fields: [lootBoxId], references: [id])
  lootBoxId String
  quantity  Int

  @@unique([userId, lootBoxId])
  @@map("userlootbox")
}

model Stock {
  id            String         @id @default(cuid()) @map("_id")
  name          String         @unique
  price         Float          @default(0)
  userStocks    UserStock[]
  lootBoxStocks LootBoxStock[]

  @@map("stock")
}

model LootBoxStock {
  id        String  @id @default(cuid()) @map("_id")
  lootBox   LootBox @relation(fields: [lootBoxId], references: [id])
  lootBoxId String
  stock     Stock   @relation(fields: [stockId], references: [id])
  stockId   String
  quantity  Int

  @@unique([lootBoxId, stockId])
  @@map("lootboxstock")
}

model Friendship {
  id          String   @id @default(cuid()) @map("_id")
  requesterId String
  recipientId String
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations for friend relationships
  requester User @relation(name: "FollowerRelation", fields: [requesterId], references: [id])
  recipient User @relation(name: "FollowingRelation", fields: [recipientId], references: [id])

  // Prevents duplicate follow relationships
  @@unique([requesterId, recipientId])
}

model Transaction {
  id          String   @id @default(cuid()) @map("_id")
  userId      String
  stockSymbol String
  type        String // "BUY" or "SELL"
  quantity    Int
  price       Float
  totalCost   Float
  timestamp   DateTime @default(now())
  status      String   @default("COMPLETED")
  publicNote  String? // Optional public note
  privateNote String? // Optional private note

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([stockSymbol])
  @@index([timestamp])
}

model Session {
  id             String   @id @default(cuid()) @map("_id")
  userId         String
  token          String   @unique
  expiresAt      DateTime
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid()) @map("_id")
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  idToken String?

  @@unique([providerId, accountId])
  @@index([userId])
  @@map("account")
}

model Verification {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@index([identifier])
  @@map("verification")
}

model AlphaVantageNews {
  id        String   @id @default(cuid()) @map("_id")
  tickers   String   @default("NVDA") // Comma-separated list of tickers
  data      Json // Store the full API response as JSON
  expiresAt DateTime // When the cache expires
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tickers])
  @@map("alphavantage_news")
}



model MarketSentiment {
  id            String   @id @default(cuid()) @map("_id")
  date          String   @unique // Format: YYYY-MM-DD
  bullishCount  Int      @default(0)
  bearishCount  Int      @default(0)
  topPicks      Json     // Array of { symbol: string, count: number }
  marketTrend   Json     // Array of { trend: string, count: number }
  mostDiscussed Json     // Array of { symbol: string, count: number }
  timestamp     DateTime? // Make optional to handle existing null values
  updatedAt     DateTime? // Make it optional to handle existing inconsistent data

  @@map("market_sentiment")
}

model UserVote {
  id          String   @id @default(cuid()) @map("_id")
  userId      String
  date        String   // Format: YYYY-MM-DD
  sentiment   String   // 'bullish' or 'bearish'
  topPick     String?  // Stock symbol
  marketTrend String?  // Index name
  timestamp   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
  @@map("user_vote")
}

model Achievement {
  id          String            @id @default(cuid()) @map("_id")
  name        String
  description String
  image       String?
  users       UserAchievement[]

  @@map("achievement")
}

model UserAchievement {
  id            String   @id @default(cuid()) @map("_id")
  userId        String
  achievementId String
  earnedAt      DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievement")
}

model StockAIUsage {
  id          String   @id @default(cuid()) @map("_id")
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date        DateTime @default(now())
  usageCount  Int      @default(0)

  @@unique([userId, date])
  @@index([date])
  @@map("stock_ai_usage")
}

model StockAICache {
  id          String   @id @default(cuid()) @map("_id")
  articleUrl  String   @unique
  title       String
  summary     String
  analysis    Json
  createdAt   DateTime @default(now())
  expiresAt   DateTime

  @@index([createdAt])
  @@index([expiresAt])
  @@map("stock_ai_cache")
}

model DailyDrawEntry {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  tokens    Int
  drawDate  String   // YYYY-MM-DD format
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, drawDate])
  @@map("daily_draw_entry")
}

model DailyDrawNotification {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  tokens    Int
  drawDate  String   // YYYY-MM-DD format
  createdAt DateTime @default(now())
  read      Boolean  @default(false)

  @@map("daily_draw_notification")
}

model ActivityFeedEntry {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      String   // "DAILY_DRAW_WIN", "STOCK_BUY", "STOCK_SELL", "LOOTBOX_WIN"
  data      Json     // Flexible data structure for different activity types
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
  @@map("activity_feed_entry")
}


